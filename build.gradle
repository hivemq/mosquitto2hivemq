/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id 'java'
    id 'maven-publish'
    id 'application'
    id "com.github.hierynomus.license" version "0.15.0"
    id 'com.github.johnrengelman.shadow' version '4.0.4' apply false
    id 'com.github.breadmoirai.github-release' version '2.2.9' apply false
    id 'com.jfrog.bintray' version '1.8.4' apply false
}

repositories {
    mavenLocal()
    mavenCentral()
}

apply plugin: 'application'
apply plugin: 'com.github.johnrengelman.shadow'

dependencies {
    compile 'org.apache.commons:commons-compress:1.19'
    compile 'com.google.guava:guava:28.1-jre'
    compile 'commons-io:commons-io:2.6'
    compile 'org.apache.commons:commons-lang3:3.9'
    compile 'info.picocli:picocli:4.0.4'
    compile 'info.picocli:picocli-codegen:4.0.4'
    compile 'org.jboss.shrinkwrap:shrinkwrap-api:1.2.6'
    compile 'net.openhft:zero-allocation-hashing:0.9'
    compile 'org.jetbrains:annotations:17.0.0'
    compile 'org.tinylog:tinylog-api:2.0.0'
    compile 'org.tinylog:tinylog-impl:2.0.0'
    testCompile 'org.jboss.shrinkwrap:shrinkwrap-impl-base:1.2.6'
    testCompile 'org.junit.jupiter:junit-jupiter-api:5.5.2'
    testCompile 'org.junit.jupiter:junit-jupiter-engine:5.5.2'
    testCompile 'org.junit.jupiter:junit-jupiter-params:5.5.2'
    testCompile 'org.testcontainers:testcontainers:1.12.1'
    testCompile 'org.testcontainers:junit-jupiter:1.12.1'
    testCompile 'org.xmlunit:xmlunit-core:2.6.3'
    testCompile 'org.xmlunit:xmlunit-matchers:2.6.3'
    testCompile 'org.xmlunit:xmlunit-assertj:2.6.3'
    testCompile 'org.xmlunit:xmlunit-placeholders:2.6.3'
    testCompile 'com.hivemq:hivemq-mqtt-client:1.1.2'
}

//sourceCompatibility = '11'
sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

group = 'com.hivemq'
version = '1.0.0' + (Boolean.valueOf(System.getProperty("snapshot")) ? "-SNAPSHOT" : "")
description = 'Mosquitto2HiveMQ is a tool that provides a migration from Mosquitto to HiveMQ '

application {
    mainClassName = 'com.hivemq.backup.mosquitto.XmlFromMosquittoDB'
}

apply plugin: 'application'
apply plugin: 'com.github.johnrengelman.shadow'

repositories {
    mavenCentral()
    jcenter()
}


ext {
    moduleName = 'com.hivemq.cli'
    readableName = 'mosquitto2hivemq'
    appName = 'Mosquitto2HiveMQ'
    githubOrg = 'hivemq'
    githubRepo = 'mosquitto2hivemq'
    githubUrl = 'https://github.com/' + githubOrg + '/' + githubRepo
    scmConnection = 'scm:git:git://github.com/' + githubOrg + '/' + githubRepo + '.git'
    scmDeveloperConnection = 'scm:git:ssh://git@github.com/' + githubOrg + '/' + githubRepo + '.git'
    issuesUrl = githubUrl + '/issues'
    prevVersion = ''

    appJarName = "${readableName}.jar"

    // Directories
    pkgDir = "${projectDir}/packages/${project.version}"

    // Vendor details
    copyright = "Copyright 2019 HiveMQ and the HiveMQ Community"
    vendor = "HiveMQ GmbH"
    website = "https://www.hivemq.com/"
    license = "${projectDir}/LICENSE"

    projectString = "mosquitto2hivemq-${project.version}"
    packagingDir = "${buildDir}/package"
    packagingProjectDir = "${packagingDir}/${projectString}"

}

/**************
 * Compliance *
 **************/

downloadLicenses {
    ext.apacheTwo = license('Apache License, Version 2.0', 'http://opensource.org/licenses/Apache-2.0')
    ext.cddlOnePointZero = license('CDDL, Version 1.0', 'http://glassfish.java.net/public/CDDLv1.0.html')
    ext.cddlOnePointOne = license('CDDL, Version 1.1', 'http://glassfish.java.net/public/CDDL+GPL_1_1.html')
    ext.lgplTwoPointOne = license('LGPL, Version 2.1', 'http://www.gnu.org/licenses/lgpl-2.1.html')
    ext.eplOnePointZero = license('EPL, Version 1.0', 'http://www.eclipse.org/legal/epl-v10.html')

    aliases = [
            (apacheTwo)       : ['Apache License 2', 'Apache Software License - Version 2.0', 'The Apache Software License, Version 2.0', 'Apache 2', 'Apache License Version 2.0', 'Apache License, Version 2.0', 'Apache License 2.0', 'Apache 2.0', 'The Apache License, Version 2.0', license('Apache License', 'http://www.apache.org/licenses/LICENSE-2.0')],
            (cddlOnePointZero): ['Common Development and Distribution License (CDDL) v1.0', 'COMMON DEVELOPMENT AND DISTRIBUTION LICENSE (CDDL) Version 1.0'],
            (cddlOnePointOne) : ['CDDL 1.1'],
            (lgplTwoPointOne) : ['LGPL 2.1', 'GNU Lesser General Public License'],
            (eplOnePointZero) : ['Eclipse Public License - Version 1.0', 'Eclipse Public License', 'Eclipse Public License - v 1.0']
    ]
}

license {
    include "**/*.java"
    header = file('HEADER')
}


task updateThirdPartyLicenses {
    group 'license'
    dependsOn ':downloadLicenses'
    doLast {
        javaexec {
            main = '-jar'
            args = ["${rootDir}/gradle/tools/license-third-party-tool-1.0.jar",
                    "${buildDir}/reports/license/dependency-license.xml",
                    "${projectDir}/src/packaging/third-party-licenses/licenses",
                    "${projectDir}/src/packaging/third-party-licenses/licenses.html"
            ]
        }
    }
}

test {
    useJUnitPlatform()
    if (project.hasProperty("test_temp_dir")) {
        jvmArgs "-Djava.io.tmpdir=" + test_temp_dir
    } else {
        def tempDir = System.properties['java.io.tmpdir']
        if (tempDir) {
            jvmArgs "-Djava.io.tmpdir=" + tempDir
        }
    }

}

jar {

    manifest () {
        attributes(
                'Built-JDK': System.getProperty('java.version'),
                'Implementation-Title': project.appName,
                'Implementation-Version': project.version,
                'Implementation-Vendor': project.vendor,
                'Specification-Title': project.appName,
                'Specification-Version': project.version,
                'Specification-Vendor': project.vendor,
                'Main-Class': application.mainClassName,
                'Built-Date': new Date().format("yyyy-MM-dd HH:mm:ss")
        )
    }

    from(configurations.runtime.resolve().collect { it.isDirectory() ? it : zipTree(it) }) {
        exclude 'META-INF/MANIFEST.MF'
        exclude 'META-INF/*.SF'
        exclude 'META-INF/*.DSA'
        exclude 'META-INF/*.RSA'
    }

    finalizedBy shadowJar
}

license {
    include "**/*.java"
    header = file('HEADER')
}


test {
    useJUnitPlatform()
    if (project.hasProperty("test_temp_dir")) {
        jvmArgs "-Djava.io.tmpdir=" + test_temp_dir
    } else {
        def tempDir = System.properties['java.io.tmpdir']
        if (tempDir) {
            jvmArgs "-Djava.io.tmpdir=" + tempDir
        }
    }

}

task cleanPackaging {
    group 'packaging'

    doFirst {
        delete "${project.packagingDir}"
        delete "${pkgDir}"
    }
}

task copyFiles(type: Copy) {
    group 'packaging'

    mustRunAfter ':cleanPackaging'
    dependsOn ':jar'

    from "${buildDir}/libs/${projectString}.jar"
    destinationDir = new File("${project.packagingDir}")

    from "${buildDir}/README.md"
    into "${project.packagingDir}"

}

task packagingDistribution( type: Zip) {
    group 'packaging'

    dependsOn ':cleanPackaging'
    dependsOn ':copyFiles'

    archiveFileName = "${projectString}.zip"
    destinationDirectory =  new File("${pkgDir}")

    from "${project.packagingDir}"

}

defaultTasks 'clean', 'packagingDistribution'

// Helpers
import java.security.DigestInputStream
import java.security.MessageDigest
static def checkSum(File file) {
    file.withInputStream {
        new DigestInputStream(it, MessageDigest.getInstance('SHA-256')).withStream {
            it.eachByte {}
            it.messageDigest.digest().encodeHex() as String
        }
    }
}